class Header extends Component{
  constructor(props){
    super(props);
    this.state={
      searchV:false,
    }
  }
  showSearch(){
    this.setState({searchV:!this.state.searchV});
  }
  render(){
    let searchInputClass = ["searchInput"];
    if(this.state.searchV){
      searchInputClass.push("active");
    }
    return (
      <div className="header">
        <h2>Dibangun Dengan</h2><img src={this.props.logo} className="App-logo" alt=""/><br></br>
        <input
          type="text"
          className={searchInputClass.join(``)}
          placeholder="search"
          />
        <a onClick={this.showSearch.bind(this)}
            className="fa fa-search searchIcon">search
        </a>
      </div>
    );
  }
}

class Clock extends Component{
  constructor(props){
    super(props);
    this.state={date: new Date(),};
  }
  // memerintahkan browser buat menjalankan fungsi tick tiap detik
  componentDidMount(){
    this.timerID = setInterval(
      () => this.tick(),
      1000
    );
  }
  // ketika komponen sudah tidak ada mematikan timer
  componentWillUnmount(){
    clearInterval(this.timerID);
  }
  tick() {
    this.setState({
      date: new Date(),
    });
  }
  render() {
    return (
      <div className="clock">
        <h1>Hello, world!</h1>
        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>
      </div>
    );
  }
}

class Comment extends Component{
  render(){
    return (
      <div className="comment">
        <span>{this.props.date}</span>
        <h2>{this.props.name}</h2>
        <p>{this.props.coment}</p>
      </div>
    );
  }
}
const comen = {
  date: new Date().toLocaleDateString(),
  name:"Budi",
  comment:"Uhuy"
};

class Clock extends Component{
  constructor(props)
    {
      super(props);
      const current= new Date();
          this.state = {
            hours: current.getHours(),
            minutes:current.getMinutes(),
            seconds:current.getSeconds(),
            ampm: current.getHours() >=12 ? 'pm':'am',
          };
      this.setTimer();
    }
    setTimer()
    {
      setTimeout(this.updateClock.bind(this),1000)
    }
    updateClock()
    {
      const current= new Date();
          this.setState ({
            hours: current.getHours(),
            minutes:current.getMinutes(),
            seconds:current.getSeconds(),
            ampm : current.getHours() >=12 ? 'pm':'am',
          },this.setTimer());
          
    }
  render (){
    return (
      <div className="clock">
        {
          this.state.hours == 0 ? 12 :
          this.state.hours > 12 ? this.state.hours-12 :
          this.state.hours
        }:
        {
          this.state.minutes > 9 ? this.state.minutes : `0${this.state.minutes}`
        }:
        {
          this.state.seconds > 9 ? this.state.seconds : `0${this.state.seconds}`
        } 
        {this.state.ampm}
      </div>
    );
  }
}
class LoginControl extends React.Component {
  constructor(props) {
    super(props);
    this.handleLoginClick = this.handleLoginClick.bind(this);
    // this.handleLogoutClick = this.handleLogoutClick.bind(this);
    this.state = {
      isLoggedIn: false,
      button:[]
    };
    console.log(this.state.isLoggedIn);
  }
  handleLoginClick() {
    this.setState({isLoggedIn: !this.state.isLoggedIn});
    this.handleText(this.state.isLoggedIn);
    console.log(this.state.isLoggedIn);
  }
  handleText(a){
    if (a) {
      this.setState({button:'true'});
    } else {
      this.setState({button:'false'});
    }
  }
  componentDidMount(){
    if (this.state.isLoggedIn) {
      this.setState({button:'trueAwal'});
    } else {
      this.setState({button:'falseAwal'});
    }
    
  }
  render() {
    return (
      <div>
        <a onClick={this.handleLoginClick}>control</a>
        <br></br>{this.state.isLoggedIn}
        {this.state.button}
      </div>
    );
  }
}
class Reservation extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      celcius: [],
      fahrenheit: [],
      hsl: 0
    };
    this.handleCelciusChange = this.handleCelciusChange.bind(this);
    this.handleFahrenheitChange = this.handleFahrenheitChange.bind(this);
  }

  handleCelciusChange(event) {
    const target = event.target;
    const value = target.value;
    const name = target.name;
    this.setState({
      celcius: value
    });
    this.cTof();
  }
  handleFahrenheitChange(event) {
    const target = event.target;
    const value = target.value;
    const name = target.name;
    this.setState({
      fahrenheit: value
    });
    this.fToc();
  }
  cTof(){
    let hasil;
    hasil=((9*this.state.celcius)/5)+32;
    this.setState({
      fahrenheit: hasil
    });
  }

  fToc(){
    let hasil;
    hasil=((this.state.fahrenheit-32)/9)*5;
    this.setState({
      celcius: hasil,
      hsl:hasil
    });
    
  }
  render() {
    return (
      <div className="calc">
      <form>
        <label>
          Celcius:
          <input
            name="celcius"
            type="number"
            value={this.state.celcius}
            onChange={this.handleCelciusChange} />
        </label>
        <br />
        <label>
          Fahrenheit:
          <input
            name="fahrenheit"
            type="number"
            value={this.state.fahrenheit}
            onChange={this.handleFahrenheitChange} />
        </label>
      </form>
      <br />
      {this.state.hsl}
      </div>
    );
  }
}